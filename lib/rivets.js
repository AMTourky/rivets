// Generated by CoffeeScript 1.3.1
(function() {
  var Rivets,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Rivets = {
    Helpers: {}
  };

  Rivets.Binding = (function() {

    Binding.name = 'Binding';

    function Binding(el, adapter, type, context, keypath) {
      this.el = el;
      this.adapter = adapter;
      this.type = type;
      this.context = context;
      this.keypath = keypath;
      this.bind = __bind(this.bind, this);

      this.set = __bind(this.set, this);

      this.routine = Rivets.bindings[this.type] || Rivets.Helpers.attributeBinding(this.type);
    }

    Binding.prototype.set = function(value) {
      if (value == null) {
        value = null;
      }
      return this.routine(this.el, value || this.adapter.read(this.context, this.keypath));
    };

    Binding.prototype.bind = function() {
      var _ref,
        _this = this;
      this.adapter.subscribe(this.context, this.keypath, function(value) {
        return _this.set(value);
      });
      if (_ref = this.type, __indexOf.call(Rivets.bidirectionals, _ref) >= 0) {
        return this.el.addEventListener('change', function(el) {
          return _this.adapter.publish(_this.context, _this.keypath, Rivets.Helpers.getInputValue(el));
        });
      }
    };

    return Binding;

  })();

  Rivets.Helpers.getInputValue = function(el) {
    switch (el.type) {
      case 'text':
      case 'textarea':
      case 'password':
      case 'select-one':
        return el.value;
      case 'checkbox':
      case 'radio':
        return el.checked;
    }
  };

  Rivets.Helpers.attributeBinding = function(attr) {
    return function(el, value) {
      if (value) {
        return el.setAttribute(attr, value);
      } else {
        return el.removeAttribute(attr);
      }
    };
  };

  Rivets.Helpers.stateBinding = function(attr, inverse) {
    if (inverse == null) {
      inverse = false;
    }
    return function(el, value) {
      var binding;
      binding = Rivets.Helpers.attributeBinding(attr);
      return binding(el, inverse === !value ? attr : false);
    };
  };

  Rivets.bindings = {
    checked: Rivets.Helpers.stateBinding('checked'),
    selected: Rivets.Helpers.stateBinding('selected'),
    disabled: Rivets.Helpers.stateBinding('disabled'),
    unchecked: Rivets.Helpers.stateBinding('checked', true),
    unselected: Rivets.Helpers.stateBinding('selected', true),
    enabled: Rivets.Helpers.stateBinding('disabled', true),
    text: function(el, value) {
      return el.innerText = value || '';
    },
    html: function(el, value) {
      return el.innerHTML = value || '';
    },
    value: function(el, value) {
      return el.value = value;
    },
    show: function(el, value) {
      return el.style.display = value ? '' : 'none';
    },
    hide: function(el, value) {
      return el.style.display = value ? 'none' : '';
    }
  };

  Rivets.bidirectionals = ['value', 'checked', 'unchecked', 'selected', 'unselected'];

  Rivets["interface"] = {
    register: function(routine, routineFunction) {
      return Rivets.bindings[routine] = routineFunction;
    },
    bind: function(el, adapter, contexts) {
      var attribute, binding, context, keypath, node, path, type, _i, _len, _ref, _results;
      if (contexts == null) {
        contexts = {};
      }
      _ref = el.getElementsByTagName('*');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = node.attributes;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            attribute = _ref1[_j];
            if (/^data-/.test(attribute.name)) {
              type = attribute.name.replace('data-', '');
              path = attribute.value.split('.');
              context = path.shift();
              keypath = path.join('.');
              binding = new Rivets.Binding(node, adapter, type, contexts[context], keypath);
              _results1.push(binding.bind());
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    }
  };

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Rivets["interface"];
  } else {
    this.rivets = Rivets["interface"];
  }

}).call(this);
